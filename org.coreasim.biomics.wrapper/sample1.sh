# java -jar ../org.coreasm.biomics.wrapper/target/biomicsWrapper.jar -r localhost -rp 1234
# java -jar ../org.coreasm.biomics.wrapper/target/biomicsWrapper.jar -p 1234 -r localhost -rp 8080

curl -i -X PUT -H "Content-Type: application/json" http://localhost:1234/agents/create -d '{ "name" : "dummyAgent4", "program" : "CoreASM CommTest\n \n //use standard plugins\n use Standard\n \n //set program for the executing agent\n init Start\n scheduling ffa\n \n universe people = { receiver, sender}\n controlled testlocation: Agents\n \n rule Start = \n par\n program(sender):= senderProgram\n program(receiver):= receiverProgram\n program(self) := reporterProgram\n endpar\n \n policy ffa = \n par\n schedule receiver\n schedule sender\n endpar\n rule receiverProgram = \n par\n \n forall x in inboxOf(self) do \n print messageSubject(x)+\" at time \"+messageStep(x)+\" => \"+messageContent(x)\n endpar\n \n rule reporterProgram = \n par\n if inboxOf(receiver)!={} then\n print \"nothing in Inbox\" endpar"}'

curl -i -X PUT -H "Content-Type: application/json" http://localhost:8080/agents/create -d '{ "name" : "dummyAgent4", "program" : "CoreASM CommTest\n \n //use standard plugins\n use Standard\n \n //set program for the executing agent\n init Start\n scheduling ffa\n \n universe people = { receiver, sender}\n controlled testlocation: Agents\n \n rule Start = \n par\n program(sender):= senderProgram\n program(receiver):= receiverProgram\n program(self) := reporterProgram\n endpar\n \n policy ffa = \n par\n schedule receiver\n schedule sender\n endpar\n \n rule senderProgram = \n par \n // create agent initialized by receiverProgram using reporterProgram in testlocation\n print \"Filling the outbox at step \"+stepcount\n send 8080 to \"receiver\" with subject \"Number\"\n send \"hello from Agent4\" to \"receiver\" with subject \"String\"\n // send self to \"receiver\" with subject \"Agent\"\n send {1,2,3,4} to \"receiver\" with subject \"Set\"\n send [1,2,3,4] to \"receiver\" with subject \"List\"\n // send {sender-> \"senderProgram\", receiver -> \"receiverProgram\"} to receiver with subject \"Map\"\n // send receiverProgram to receiver with subject \"Rule\"\n endpar\n \n rule receiverProgram = \n par\n \n forall x in inboxOf(self) do \n print messageSubject(x)+\" at time \"+messageStep(x)+\" => \"+messageContent(x)\n endpar\n \n rule reporterProgram = \n par\n if inboxOf(receiver)!={} then\n program(self):=undef\n endpar"}'

curl -i http://localhost:1234/agents/dummyAgent4/start
curl -i http://localhost:8080/agents/dummyAgent4/start
