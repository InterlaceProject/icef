package org.coreasim.compiler.components.preprocessor;

import java.util.List;
import java.util.Map;

import org.coreasim.compiler.components.preprocessor.Information;
import org.coreasim.compiler.components.preprocessor.Trigger;
import org.coreasim.engine.interpreter.ASTNode;

/**
 * Synthesizes information.
 * A Synthesize rule transforms information at the children of a node
 * into new information at the node itself.
 * @author Markus Brenner
 *
 */
public interface SynthesizeRule {
	/**
	 * Executes the synthesize rule.
	 * The rule should still check the node on which is it called. It should
	 * not assume that it is called on only the nodes specified by getTriggers.
	 * @param n The node for which the rule is executed
	 * @param children A non-null list with the information entries of the child nodes
	 * @return A map containing the information generated by this rule
	 */
	public Map<String, Information> transform(ASTNode n, List<Map<String, Information>> children);
	/**
	 * Denotes the trigger conditions of this rule
	 * @return A list of triggers
	 */
	public List<Trigger> getTriggers();
}
